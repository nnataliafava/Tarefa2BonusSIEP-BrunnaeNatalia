#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
TAREFA 2: An√°lise de Dados Imobili√°rios com ANOVA e Regress√£o Linear
Dashboard Interativo - Ames Housing Dataset

Alunas:
Brunna Gavi√£o Moraes - 231025341
Nat√°lia Fava Deschamps Rab√™lo - 231025379

Universidade de Bras√≠lia (UnB)
Faculdade de Tecnologia ‚Äì FT | Departamento de Engenharia de Produ√ß√£o ‚Äì EPR
Professor: Jo√£o Gabriel de Moraes Souza
"""

import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import statsmodels.api as sm
import statsmodels.formula.api as smf
from statsmodels.stats.outliers_influence import variance_inflation_factor
from statsmodels.stats.diagnostic import het_breuschpagan
from statsmodels.stats.multicomp import pairwise_tukeyhsd
from scipy import stats
from scipy.stats import shapiro, levene, kruskal, mannwhitneyu
import warnings
warnings.filterwarnings('ignore')

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="An√°lise Imobili√°ria - Ames Housing",
    page_icon="üè†",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personalizado
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1f4e79;
        text-align: center;
        margin-bottom: 0.5rem;
    }
    .sub-header {
        font-size: 1.2rem;
        color: #2e75b6;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-container {
        background-color: #f0f8ff;
        padding: 1rem;
        border-radius: 10px;
        border-left: 5px solid #1f4e79;
    }
    .interpretation-box {
        background-color: #e8f4fd;
        padding: 1rem;
        border-radius: 8px;
        border-left: 4px solid #2e75b6;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

# Cabe√ßalho
st.markdown('<h1 class="main-header">üè† An√°lise Imobili√°ria - Ames Housing Dataset</h1>', unsafe_allow_html=True)
st.markdown('<p class="sub-header">Dashboard Interativo para An√°lise de Precifica√ß√£o Imobili√°ria</p>', unsafe_allow_html=True)
st.markdown('<p class="sub-header">üë• Brunna Gavi√£o Moraes & Nat√°lia Fava Deschamps Rab√™lo | üìö Prof. Jo√£o Gabriel de Moraes Souza</p>', unsafe_allow_html=True)

# Fun√ß√£o para carregar dados
@st.cache_data
def load_data():
    """Carrega e processa o dataset Ames Housing"""
    try:
        # Tenta carregar o arquivo
        base = pd.read_csv("AmesHousing.csv")
        
        # Mapeamento de colunas
        colunas = {
            'SalePrice': 'PrecoVenda',
            'Neighborhood': 'Bairro',
            'Exter Qual': 'QualidadeExterna',
            'Kitchen Qual': 'QualidadeCozinha',
            'Gr Liv Area': 'AreaConstruida',
            'Overall Qual': 'QualidadeGeral',
            'Year Built': 'AnoConstrucao'
        }
        
        # Filtra e renomeia colunas
        df = base[list(colunas.keys())].rename(columns=colunas).dropna()
        
        # Adiciona transforma√ß√µes logar√≠tmicas
        df['Log_PrecoVenda'] = np.log(df['PrecoVenda'])
        df['Log_AreaConstruida'] = np.log(df['AreaConstruida'])
        
        return df, True
        
    except FileNotFoundError:
        st.error("‚ùå Arquivo 'AmesHousing.csv' n√£o encontrado!")
        st.info("üìÅ Por favor, fa√ßa o upload do arquivo AmesHousing.csv")
        return None, False

# Carregamento dos dados
df, dados_carregados = load_data()

if not dados_carregados:
    # Interface para upload do arquivo
    uploaded_file = st.file_uploader("Fa√ßa o upload do arquivo AmesHousing.csv", type="csv")
    if uploaded_file is not None:
        df = pd.read_csv(uploaded_file)
        colunas = {
            'SalePrice': 'PrecoVenda',
            'Neighborhood': 'Bairro',
            'Exter Qual': 'QualidadeExterna',
            'Kitchen Qual': 'QualidadeCozinha',
            'Gr Liv Area': 'AreaConstruida',
            'Overall Qual': 'QualidadeGeral',
            'Year Built': 'AnoConstrucao'
        }
        df = df[list(colunas.keys())].rename(columns=colunas).dropna()
        df['Log_PrecoVenda'] = np.log(df['PrecoVenda'])
        df['Log_AreaConstruida'] = np.log(df['AreaConstruida'])
        dados_carregados = True

if dados_carregados:
    # Sidebar com informa√ß√µes do dataset
    st.sidebar.header("üìä Informa√ß√µes do Dataset")
    st.sidebar.metric("Total de Observa√ß√µes", f"{len(df):,}")
    st.sidebar.metric("Pre√ßo M√©dio", f"${df['PrecoVenda'].mean():,.0f}")
    st.sidebar.metric("Vari√°veis Analisadas", "7")
    
    # Configura√ß√µes da an√°lise
    st.sidebar.header("‚öôÔ∏è Configura√ß√µes da An√°lise")
    alpha_nivel = st.sidebar.slider("N√≠vel de Signific√¢ncia (Œ±)", 0.01, 0.10, 0.05, 0.01)
    
    # Abas principais
    tab1, tab2, tab3 = st.tabs(["üîç An√°lise Explorat√≥ria & ANOVA", "üìà Regress√£o Linear M√∫ltipla", "üìã Conclus√µes & Recomenda√ß√µes"])
    
    # ========================================================================================
    # TAB 1: AN√ÅLISE EXPLORAT√ìRIA E ANOVA
    # ========================================================================================
    with tab1:
        st.header("üîç An√°lise Explorat√≥ria e Comparativa com ANOVA")
        
        # Sele√ß√£o de vari√°veis categ√≥ricas para an√°lise
        st.subheader("Sele√ß√£o de Vari√°veis Categ√≥ricas")
        variaveis_categoricas = ['Bairro', 'QualidadeExterna', 'QualidadeCozinha']
        var_selecionada = st.selectbox(
            "Escolha a vari√°vel categ√≥rica para an√°lise:",
            variaveis_categoricas,
            help="Selecione uma vari√°vel categ√≥rica para realizar a an√°lise ANOVA"
        )
        
        if var_selecionada:
            col1, col2 = st.columns([2, 1])
            
            with col1:
                # Visualiza√ß√£o com boxplot interativo
                fig = px.box(df, x=var_selecionada, y='PrecoVenda', 
                           title=f'Distribui√ß√£o do Pre√ßo de Venda por {var_selecionada}')
                fig.update_layout(xaxis_tickangle=-45, height=500)
                st.plotly_chart(fig, use_container_width=True)
            
            with col2:
                # Estat√≠sticas descritivas
                st.subheader("üìä Estat√≠sticas por Grupo")
                stats_grupo = df.groupby(var_selecionada)['PrecoVenda'].agg([
                    'count', 'mean', 'median', 'std'
                ]).round(2)
                stats_grupo.columns = ['N', 'M√©dia', 'Mediana', 'Desvio Padr√£o']
                st.dataframe(stats_grupo)
        
        # Teste de pressupostos e ANOVA
        st.subheader("üß™ Teste de Hip√≥teses")
        
        if st.button("Executar An√°lise ANOVA", type="primary"):
            
            # Prepara√ß√£o dos dados para testes
            grupos = [grupo['PrecoVenda'].values for nome, grupo in df.groupby(var_selecionada)]
            
            # 1. Teste de Normalidade (Shapiro-Wilk por grupo)
            st.write("### 1. Teste de Normalidade (Shapiro-Wilk)")
            normalidade_resultados = []
            for nome, grupo in df.groupby(var_selecionada):
                if len(grupo) > 3:  # Shapiro-Wilk precisa de pelo menos 3 observa√ß√µes
                    stat, p_val = shapiro(grupo['PrecoVenda'])
                    normalidade_resultados.append({
                        'Grupo': nome,
                        'Estat√≠stica W': f"{stat:.4f}",
                        'p-valor': f"{p_val:.4f}",
                        'Normal?': "‚úÖ Sim" if p_val > alpha_nivel else "‚ùå N√£o"
                    })
            
            if normalidade_resultados:
                st.dataframe(pd.DataFrame(normalidade_resultados))
            
            # 2. Teste de Homocedasticidade (Levene)
            st.write("### 2. Teste de Homocedasticidade (Levene)")
            levene_stat, levene_p = levene(*grupos)
            
            col1, col2 = st.columns(2)
            with col1:
                st.metric("Estat√≠stica de Levene", f"{levene_stat:.4f}")
            with col2:
                st.metric("p-valor", f"{levene_p:.4f}")
            
            homoc_resultado = "‚úÖ Vari√¢ncias homog√™neas" if levene_p > alpha_nivel else "‚ùå Vari√¢ncias heterog√™neas"
            st.write(f"**Resultado:** {homoc_resultado}")
            
            # 3. ANOVA Param√©trica
            st.write("### 3. ANOVA Param√©trica")
            modelo_anova = smf.ols(f'PrecoVenda ~ C({var_selecionada})', data=df).fit()
            anova_table = sm.stats.anova_lm(modelo_anova, typ=2)
            st.dataframe(anova_table)
            
            # 4. Teste de Kruskal-Wallis (N√£o-param√©trico)
            st.write("### 4. Teste de Kruskal-Wallis (Alternativa N√£o-param√©trica)")
            kruskal_stat, kruskal_p = kruskal(*grupos)
            
            col1, col2 = st.columns(2)
            with col1:
                st.metric("Estat√≠stica H", f"{kruskal_stat:.4f}")
            with col2:
                st.metric("p-valor", f"{kruskal_p:.4e}")
            
            # 5. Teste Post-hoc (Tukey HSD)
            if kruskal_p < alpha_nivel:
                st.write("### 5. Teste Post-hoc: Tukey HSD")
                try:
                    tukey = pairwise_tukeyhsd(endog=df['PrecoVenda'], groups=df[var_selecionada], alpha=alpha_nivel)
                    st.text(str(tukey.summary()))
                except:
                    st.warning("N√£o foi poss√≠vel executar o teste Tukey HSD para esta vari√°vel.")
            
            # Interpreta√ß√£o
            st.markdown("### üí° Interpreta√ß√£o dos Resultados")
            
            if var_selecionada == 'Bairro':
                interpretacao = f"""
                <div class="interpretation-box">
                <h4>üìç An√°lise por Bairro</h4>
                <p><strong>p-valor Kruskal-Wallis:</strong> {kruskal_p:.4e}</p>
                <p><strong>Conclus√£o:</strong> {'Existe diferen√ßa significativa' if kruskal_p < alpha_nivel else 'N√£o h√° diferen√ßa significativa'} 
                nos pre√ßos medianos entre diferentes bairros (Œ± = {alpha_nivel}).</p>
                <p><strong>Implica√ß√£o Pr√°tica:</strong> A localiza√ß√£o √© um fator crucial na precifica√ß√£o imobili√°ria. 
                Investidores e corretores devem considerar o bairro como vari√°vel prim√°ria na avalia√ß√£o de im√≥veis.</p>
                </div>
                """
            elif var_selecionada == 'QualidadeExterna':
                interpretacao = f"""
                <div class="interpretation-box">
                <h4>üèóÔ∏è An√°lise por Qualidade Externa</h4>
                <p><strong>p-valor Kruskal-Wallis:</strong> {kruskal_p:.4e}</p>
                <p><strong>Conclus√£o:</strong> {'Existe diferen√ßa significativa' if kruskal_p < alpha_nivel else 'N√£o h√° diferen√ßa significativa'} 
                nos pre√ßos medianos entre diferentes qualidades externas (Œ± = {alpha_nivel}).</p>
                <p><strong>Implica√ß√£o Pr√°tica:</strong> A qualidade do acabamento externo impacta diretamente o valor do im√≥vel. 
                Reformas externas podem ser um investimento com alto retorno.</p>
                </div>
                """
            else:  # QualidadeCozinha
                interpretacao = f"""
                <div class="interpretation-box">
                <h4>üç≥ An√°lise por Qualidade da Cozinha</h4>
                <p><strong>p-valor Kruskal-Wallis:</strong> {kruskal_p:.4e}</p>
                <p><strong>Conclus√£o:</strong> {'Existe diferen√ßa significativa' if kruskal_p < alpha_nivel else 'N√£o h√° diferen√ßa significativa'} 
                nos pre√ßos medianos entre diferentes qualidades de cozinha (Œ± = {alpha_nivel}).</p>
                <p><strong>Implica√ß√£o Pr√°tica:</strong> A qualidade da cozinha √© determinante no valor do im√≥vel. 
                Renova√ß√µes na cozinha podem gerar valoriza√ß√£o significativa.</p>
                </div>
                """
            
            st.markdown(interpretacao, unsafe_allow_html=True)
    
    # ========================================================================================
    # TAB 2: REGRESS√ÉO LINEAR M√öLTIPLA
    # ========================================================================================
    with tab2:
        st.header("üìà Modelagem Preditiva com Regress√£o Linear M√∫ltipla")
        
        # Configura√ß√£o do modelo
        st.subheader("‚öôÔ∏è Configura√ß√£o do Modelo")
        
        col1, col2 = st.columns(2)
        with col1:
            usar_log = st.checkbox("Usar transforma√ß√£o logar√≠tmica", value=True, 
                                 help="Modelo log-log permite interpreta√ß√£o percentual dos coeficientes")
            incluir_constante = st.checkbox("Incluir intercepto", value=True)
        
        with col2:
            variaveis_numericas = ['AreaConstruida', 'QualidadeGeral', 'AnoConstrucao']
            vars_numericas_selecionadas = st.multiselect(
                "Vari√°veis num√©ricas:", 
                variaveis_numericas, 
                default=variaveis_numericas
            )
            
            variaveis_cat = ['QualidadeExterna', 'QualidadeCozinha']
            vars_cat_selecionadas = st.multiselect(
                "Vari√°veis categ√≥ricas:", 
                variaveis_cat, 
                default=variaveis_cat
            )
        
        if st.button("üöÄ Executar Regress√£o Linear", type="primary"):
            
            # Prepara√ß√£o dos dados
            df_modelo = df.copy()
            
            if usar_log:
                y_var = 'Log_PrecoVenda'
                # Aplicar log nas vari√°veis num√©ricas se necess√°rio
                for var in vars_numericas_selecionadas:
                    if var == 'AreaConstruida':
                        df_modelo[f'Log_{var}'] = df_modelo['Log_AreaConstruida']
                    else:
                        df_modelo[f'Log_{var}'] = np.log(df_modelo[var])
                vars_numericas_finais = [f'Log_{var}' if var == 'AreaConstruida' else f'Log_{var}' 
                                       for var in vars_numericas_selecionadas]
            else:
                y_var = 'PrecoVenda'
                vars_numericas_finais = vars_numericas_selecionadas
            
            # Criar vari√°veis dummy
            if vars_cat_selecionadas:
                dummies = pd.get_dummies(df_modelo[vars_cat_selecionadas], drop_first=True, dtype=float)
                df_modelo = pd.concat([df_modelo, dummies], axis=1)
                vars_dummy = list(dummies.columns)
            else:
                vars_dummy = []
            
            # Construir f√≥rmula do modelo
            todas_vars = vars_numericas_finais + vars_dummy
            formula = f'{y_var} ~ ' + ' + '.join(todas_vars)
            
            # Ajustar modelo
            modelo = smf.ols(formula=formula, data=df_modelo).fit()
            
            # Exibir resultados
            st.subheader("üìä Resultados do Modelo")
            
            # M√©tricas principais
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("R¬≤ Ajustado", f"{modelo.rsquared_adj:.4f}")
            with col2:
                st.metric("R¬≤", f"{modelo.rsquared:.4f}")
            with col3:
                st.metric("AIC", f"{modelo.aic:.1f}")
            with col4:
                st.metric("BIC", f"{modelo.bic:.1f}")
            
            # Tabela de coeficientes
            st.subheader("üî¢ Coeficientes do Modelo")
            coef_df = pd.DataFrame({
                'Vari√°vel': modelo.params.index,
                'Coeficiente': modelo.params.values,
                'Erro Padr√£o': modelo.bse.values,
                't-valor': modelo.tvalues.values,
                'p-valor': modelo.pvalues.values,
                'IC 95% Inf': modelo.conf_int()[0].values,
                'IC 95% Sup': modelo.conf_int()[1].values
            })
            coef_df['Significativo'] = coef_df['p-valor'].apply(lambda x: '‚úÖ' if x < 0.05 else '‚ùå')
            st.dataframe(coef_df.round(4))
            
            # Diagn√≥sticos do modelo
            st.subheader("ü©∫ Diagn√≥stico dos Pressupostos")
            
            # 1. Gr√°ficos de res√≠duos
            fig = make_subplots(
                rows=2, cols=2,
                subplot_titles=['Res√≠duos vs Valores Ajustados', 'Q-Q Plot', 
                              'Histograma dos Res√≠duos', 'Res√≠duos Padronizados']
            )
            
            residuos = modelo.resid
            valores_ajustados = modelo.fittedvalues
            residuos_padronizados = (residuos - residuos.mean()) / residuos.std()
            
            # Res√≠duos vs Ajustados
            fig.add_trace(go.Scatter(x=valores_ajustados, y=residuos, mode='markers', name='Res√≠duos'),
                         row=1, col=1)
            fig.add_hline(y=0, line_dash="dash", line_color="red", row=1, col=1)
            
            # Q-Q Plot
            from scipy.stats import probplot
            qq_data = probplot(residuos, dist="norm")
            fig.add_trace(go.Scatter(x=qq_data[0][0], y=qq_data[0][1], mode='markers', name='Q-Q'),
                         row=1, col=2)
            fig.add_trace(go.Scatter(x=qq_data[0][0], y=qq_data[1][1] + qq_data[1][0]*qq_data[0][0], 
                                   mode='lines', name='Linha Te√≥rica'), row=1, col=2)
            
            # Histograma
            fig.add_trace(go.Histogram(x=residuos, name='Distribui√ß√£o'), row=2, col=1)
            
            # Res√≠duos padronizados
            fig.add_trace(go.Scatter(x=valores_ajustados, y=residuos_padronizados, 
                                   mode='markers', name='Res√≠duos Padr.'), row=2, col=2)
            fig.add_hline(y=0, line_dash="dash", line_color="red", row=2, col=2)
            
            fig.update_layout(height=800, showlegend=False, title_text="Diagn√≥sticos dos Res√≠duos")
            st.plotly_chart(fig, use_container_width=True)
            
            # 2. Testes estat√≠sticos
            st.write("### Testes de Pressupostos")
            
            col1, col2 = st.columns(2)
            
            with col1:
                # Teste de normalidade
                shapiro_stat, shapiro_p = shapiro(residuos)
                st.write("**Teste de Normalidade (Shapiro-Wilk):**")
                st.write(f"Estat√≠stica: {shapiro_stat:.4f}")
                st.write(f"p-valor: {shapiro_p:.4f}")
                st.write("‚úÖ Res√≠duos normais" if shapiro_p > 0.05 else "‚ùå Res√≠duos n√£o-normais")
            
            with col2:
                # Teste de heterocedasticidade
                try:
                    bp_stat, bp_p, _, _ = het_breuschpagan(residuos, modelo.model.exog)
                    st.write("**Teste de Heterocedasticidade (Breusch-Pagan):**")
                    st.write(f"Estat√≠stica: {bp_stat:.4f}")
                    st.write(f"p-valor: {bp_p:.4f}")
                    st.write("‚úÖ Homocedasticidade" if bp_p > 0.05 else "‚ùå Heterocedasticidade")
                except:
                    st.write("‚ùå N√£o foi poss√≠vel executar o teste Breusch-Pagan")
            
            # 3. VIF (Multicolinearidade)
            if len(todas_vars) > 1:
                st.write("### Teste de Multicolinearidade (VIF)")
                try:
                    X = df_modelo[todas_vars].dropna()
                    if incluir_constante:
                        X = sm.add_constant(X)
                    
                    vif_data = []
                    for i in range(X.shape[1]):
                        if X.columns[i] != 'const':
                            vif = variance_inflation_factor(X.values, i)
                            vif_data.append({'Vari√°vel': X.columns[i], 'VIF': vif})
                    
                    vif_df = pd.DataFrame(vif_data)
                    vif_df['Diagn√≥stico'] = vif_df['VIF'].apply(
                        lambda x: '‚úÖ Baixo' if x < 5 else '‚ö†Ô∏è Moderado' if x < 10 else '‚ùå Alto'
                    )
                    st.dataframe(vif_df)
                except:
                    st.write("‚ùå N√£o foi poss√≠vel calcular o VIF")
            
            # Interpreta√ß√£o dos coeficientes
            st.subheader("üí° Interpreta√ß√£o dos Coeficientes")
            
            interpretacao_coef = """
            <div class="interpretation-box">
            <h4>üìä Como Interpretar os Coeficientes</h4>
            """
            
            if usar_log:
                interpretacao_coef += """
                <p><strong>Modelo Log-Log:</strong> Os coeficientes representam elasticidades (varia√ß√µes percentuais).</p>
                <ul>
                """
                for idx, var in enumerate(coef_df['Vari√°vel']):
                    if var != 'Intercept' and coef_df.iloc[idx]['p-valor'] < 0.05:
                        coef_val = coef_df.iloc[idx]['Coeficiente']
                        if 'Log_' in var:
                            var_limpo = var.replace('Log_', '')
                            interpretacao_coef += f"<li><strong>{var_limpo}:</strong> +1% ‚Üí +{coef_val*100:.2f}% no pre√ßo</li>"
                        else:
                            interpretacao_coef += f"<li><strong>{var}:</strong> Impacto categ√≥rico de {coef_val*100:.2f}%</li>"
                interpretacao_coef += "</ul>"
            else:
                interpretacao_coef += """
                <p><strong>Modelo Linear:</strong> Os coeficientes representam mudan√ßas absolutas no pre√ßo.</p>
                """
            
            interpretacao_coef += "</div>"
            st.markdown(interpretacao_coef, unsafe_allow_html=True)
            
            # Recomenda√ß√µes pr√°ticas
            st.subheader("üéØ Recomenda√ß√µes Pr√°ticas")
            
            # Encontrar as vari√°veis mais impactantes
            coef_significativos = coef_df[
                (coef_df['p-valor'] < 0.05) & (coef_df['Vari√°vel'] != 'Intercept')
            ].copy()
            coef_significativos['Impacto_Abs'] = abs(coef_significativos['Coeficiente'])
            coef_significativos = coef_significativos.sort_values('Impacto_Abs', ascending=False)
            
            if not coef_significativos.empty:
                var_mais_impactante = coef_significativos.iloc[0]['Vari√°vel']
                coef_mais_impactante = coef_significativos.iloc[0]['Coeficiente']
                
                recomendacao = f"""
                <div class="interpretation-box">
                <h4>üíº Recomenda√ß√µes para o Mercado Imobili√°rio</h4>
                <p><strong>Fator Mais Impactante:</strong> {var_mais_impactante}</p>
                <p><strong>Para Vendedores:</strong> Foque em melhorar os atributos de maior impacto identificados pelo modelo.</p>
                <p><strong>Para Compradores:</strong> Considere estes fatores na negocia√ß√£o de pre√ßos.</p>
                <p><strong>Para Investidores:</strong> Priorize im√≥veis com potencial de melhoria nos fatores mais valorados.</p>
                </div>
                """
                st.markdown(recomendacao, unsafe_allow_html=True)
    
    # ========================================================================================
    # TAB 3: CONCLUS√ïES E RECOMENDA√á√ïES
    # ========================================================================================
    with tab3:
        st.header("üìã Conclus√µes e Recomenda√ß√µes Estrat√©gicas")
        
        # Resumo executivo
        st.subheader("üìà Resumo Executivo")
        
        resumo = f"""
        <div class="interpretation-box">
        <h4>üéØ Principais Achados da An√°lise</h4>
        <p><strong>Dataset Analisado:</strong> {len(df):,} propriedades em Ames, Iowa</p>
        <p><strong>Pre√ßo M√©dio:</strong> ${df['PrecoVenda'].mean():,.0f}</p>
        <p><strong>Faixa de Pre√ßos:</strong> ${df['PrecoVenda'].min():,.0f} - ${df['PrecoVenda'].max():,.0f}</p>
        
        <h5>üè† Fatores Mais Impactantes no Pre√ßo:</h5>
        <ol>
        <li><strong>Localiza√ß√£o (Bairro):</strong> Diferen√ßas significativas entre regi√µes</li>
        <li><strong>Qualidade Geral:</strong> Forte correla√ß√£o com o valor do im√≥vel</li>
        <li><strong>√Årea Constru√≠da:</strong> Rela√ß√£o direta com o pre√ßo de venda</li>
        <li><strong>Qualidade dos Acabamentos:</strong> Impacto significativo na valoriza√ß√£o</li>
        </ol>
        </div>
        """
        st.markdown(resumo, unsafe_allow_html=True)
        
        # Gr√°ficos de correla√ß√£o
        st.subheader("üîó Matriz de Correla√ß√£o das Vari√°veis Principais")
        
        corr_vars = ['PrecoVenda', 'AreaConstruida', 'QualidadeGeral', 'AnoConstrucao']
        corr_matrix = df[corr_vars].corr()
        
        fig = px.imshow(corr_matrix, 
                       text_auto=True, 
                       aspect="auto",
                       color_continuous_scale='RdBu_r',
                       title="Correla√ß√£o entre Vari√°veis Num√©ricas")
        st.plotly_chart(fig, use_container_width=True)
        
        # Distribui√ß√£o de pre√ßos por quartis
        st.subheader("üí∞ An√°lise de Segmenta√ß√£o de Pre√ßos")
        
        df['Faixa_Preco'] = pd.qcut(df['PrecoVenda'], 4, labels=['Baixo', 'M√©dio-Baixo', 'M√©dio-Alto', 'Alto'])
        
        col1, col2 = st.columns(2)
        
        with col1:
            fig = px.histogram(df, x='Faixa_Preco', title="Distribui√ß√£o por Faixa de Pre√ßo")
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            faixa_stats = df.groupby('Faixa_Preco')['PrecoVenda'].agg(['min', 'max', 'mean']).round(0)
            faixa_stats.columns = ['M√≠nimo', 'M√°ximo', 'M√©dia']
            st.write("**Estat√≠sticas por Faixa:**")
            st.dataframe(faixa_stats)
        
        # Recomenda√ß√µes finais
        st.subheader("üöÄ Recomenda√ß√µes Estrat√©gicas")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("""
            <div class="interpretation-box">
            <h4>üë• Para Corretores e Vendedores</h4>
            <ul>
            <li><strong>Enfatize a localiza√ß√£o:</strong> Destaque as vantagens do bairro</li>
            <li><strong>Invista em qualidade:</strong> Pequenas melhorias podem gerar grande retorno</li>
            <li><strong>Precifica√ß√£o estrat√©gica:</strong> Use o modelo para justificar pre√ßos</li>
            <li><strong>Marketing direcionado:</strong> Foque nos atributos mais valorizados</li>
            </ul>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown("""
            <div class="interpretation-box">
            <h4>üíº Para Investidores</h4>
            <ul>
            <li><strong>Oportunidades de reforma:</strong> Identifique im√≥veis com potencial</li>
            <li><strong>An√°lise de bairros:</strong> Invista em regi√µes promissoras</li>
            <li><strong>ROI planejado:</strong> Calcule retorno baseado nos fatores-chave</li>
            <li><strong>Diversifica√ß√£o:</strong> Considere diferentes faixas de pre√ßo</li>
            </ul>
            </div>
            """, unsafe_allow_html=True)
        
        # Limita√ß√µes e pr√≥ximos passos
        st.subheader("‚ö†Ô∏è Limita√ß√µes e Pr√≥ximos Passos")
        
        limitacoes = """
        <div class="interpretation-box">
        <h4>üîç Limita√ß√µes do Estudo</h4>
        <ul>
        <li><strong>Escopo geogr√°fico:</strong> Dados limitados a Ames, Iowa</li>
        <li><strong>Per√≠odo temporal:</strong> N√£o considera varia√ß√µes temporais de mercado</li>
        <li><strong>Vari√°veis omitidas:</strong> Fatores como proximidade a amenidades n√£o foram inclu√≠dos</li>
        <li><strong>Pressupostos estat√≠sticos:</strong> Alguns pressupostos da regress√£o podem ser violados</li>
        </ul>
        
        <h4>üîÆ Pr√≥ximos Passos</h4>
        <ul>
        <li><strong>Modelos avan√ßados:</strong> Implementar Random Forest ou Gradient Boosting</li>
        <li><strong>Vari√°veis adicionais:</strong> Incluir dados de localiza√ß√£o e amenidades</li>
        <li><strong>An√°lise temporal:</strong> Considerar tend√™ncias de mercado ao longo do tempo</li>
        <li><strong>Valida√ß√£o externa:</strong> Testar modelo em outros mercados imobili√°rios</li>
        </ul>
        </div>
        """
        st.markdown(limitacoes, unsafe_allow_html=True)
        
        # Footer com cr√©ditos
        st.markdown("---")
        st.markdown("""
        <div style='text-align: center; color: #666; font-size: 0.9em;'>
        üìä Dashboard desenvolvido por <strong>Brunna Gavi√£o Moraes</strong> e <strong>Nat√°lia Fava Deschamps Rab√™lo</strong><br>
        üéì Universidade de Bras√≠lia (UnB) - Engenharia de Produ√ß√£o<br>
        üë®‚Äçüè´ Professor: Jo√£o Gabriel de Moraes Souza
        </div>
        """, unsafe_allow_html=True)

else:
    st.stop()
